/********************************************************************************
 * Copyright (c) 2022 Contributors to the Eclipse Foundation
 *
 * See the NOTICE file(s) distributed with this work for additional
 * information regarding copyright ownership.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Apache License 2.0 which is available at
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * SPDX-License-Identifier: Apache-2.0
 ********************************************************************************/
{
  // See https://go.microsoft.com/fwlink/?LinkId=733558
  // for the documentation about the tasks.json format
  "version": "2.0.0",
  "tasks": [
    {
      "label": "ensure-dapr",
      "type": "shell",
      "command": "./.vscode/scripts/ensure-dapr.sh",
      "presentation": {
        "close": true
      },
      "problemMatcher": []
    },
    {
      "label": "run-databroker",
      "dependsOn": [
        "ensure-dapr"
      ],
      "dependsOrder": "sequence",
      "type": "shell",
      "command": "./.vscode/scripts/run-databroker.sh",
      "group": "test",
      "presentation": {
        "reveal": "always",
        "panel": "dedicated",
        "showReuseMessage": false
      },
      "isBackground": true,
      "runOptions": {
        "instanceLimit": 1,
        "reevaluateOnRerun": true
      },
      "problemMatcher": {
        "pattern": [
          {
            "regexp": ".",
            "file": 1,
            "location": 2,
            "message": 3
          }
        ],
        "background": {
          "activeOnStart": true,
          "beginsPattern": "(?!)", // Negative Lookahead (match nothing)
          "endsPattern": "You're up and running! .* logs will appear here.$"
        }
      }
    },
    {
      "label": "run-databroker-cli",
      "type": "shell",
      "command": "./.vscode/scripts/run-databroker-cli.sh",
      "group": "test",
      "isBackground": false,
      "presentation": {
        "reveal": "always",
        "panel": "dedicated",
        "showReuseMessage": false
      },
      "runOptions": {
        "instanceLimit": 1,
        "reevaluateOnRerun": true
      }
    },
    {
      "label": "run-seat-cli",
      "dependsOn": [
        "ensure-dapr"
      ],
      "dependsOrder": "sequence",
      "type": "shell",
      "command": "./.vscode/scripts/run-seatservice-cli.sh",
      "args": [
        "${input:SEAT_POS}"
      ],
      "options": {
        "env": {
          "SEAT_WAIT": "${input:SEAT_WAIT}"
        }
      },
      "group": "test",
      "isBackground": false,
      "runOptions": {
        "instanceLimit": 1
      },
      "problemMatcher": [],
      "presentation": {
        "clear": true,
        // "close": true,
        "showReuseMessage": false
      }
    },
    {
      "label": "run-trunkservice",
      "dependsOn": [
        "ensure-dapr",
        "run-databroker"
      ],
      "dependsOrder": "sequence",
      "type": "shell",
      "command": "./.vscode/scripts/run-trunkservice.sh",
      "group": "test",
      "presentation": {
        "reveal": "always",
        "panel": "dedicated",
        "showReuseMessage": false
      },
      "isBackground": true,
      "runOptions": {
        "instanceLimit": 1,
        "reevaluateOnRerun": true
      },
      "problemMatcher": {
        "pattern": [
          {
            "regexp": ".",
            "file": 1,
            "location": 2,
            "message": 3
          }
        ],
        "background": {
          "activeOnStart": true,
          "beginsPattern": "(?!)", // Negative Lookahead (match nothing)
          "endsPattern": "You're up and running! .* logs will appear here.$"
        }
      }
    },
    {
      "label": "run-trunk-cli",
      // "detail": "Runs TRUNK Client",
      "dependsOn": [
        "ensure-dapr",
        "run-trunkservice"
      ],
      "dependsOrder": "sequence",
      "type": "shell",
      "command": "./.vscode/scripts/run-trunk-cli.sh",
      "args": [
        "${input:TRUNK_STATUS}",
      ],
      "group": "test",
      "isBackground": false,
      "runOptions": {
        "instanceLimit": 1
      },
      "presentation": {
        "reveal": "always",
        "panel": "shared",
        "showReuseMessage": false
      }
    },
    {
      "label": "run-kuksa-cli",
      // "detail": "Runs Kuksa Client",
      "dependsOrder": "sequence",
      "type": "shell",
      "command": "./.vscode/scripts/run-kuksa-cli.sh",
      "group": "test",
      "isBackground": false,
      "runOptions": {
        "instanceLimit": 1
      },
      "presentation": {
        "reveal": "always",
        "panel": "shared",
        "showReuseMessage": false
      }
    },
    {
      "label": "Start VAL",
      "dependsOn": [
        // "Clean VAL binaries",
        "Terminate Tasks",
        "ensure-dapr",
        "run-databroker",
        "run-trunkservice",
      ],
      "dependsOrder": "sequence",
      "runOptions": {
        "runOn": "folderOpen",
        "instanceLimit": 1
      },
      "problemMatcher": []
    },
    {
      "label": "integration-test (local)",
      "type": "shell",
      "command": "./.vscode/scripts/run-integrationtest.sh",
      "options": {
        "env": {
          "USE_DAPR": "1"
        }
      },
      "group": "test",
      "dependsOn": [
        "ensure-dapr",
        "run-databroker",
        "run-trunkservice",
      ],
      "dependsOrder": "sequence",
      "presentation": {
        "reveal": "always",
        "panel": "dedicated",
        "clear": true,
        "showReuseMessage": false
      },
      "isBackground": false,
      "runOptions": {
        "instanceLimit": 1,
        "reevaluateOnRerun": true
      },
      "problemMatcher": {
        "pattern": [
          {
            "regexp": "^FAILED|failed",
            "file": 1,
            "location": 2,
            "message": 3
          }
        ],
        "background": {
          "activeOnStart": true,
          "beginsPattern": "^========================================================================================= ",
          "endsPattern": "."
        }
      }
    },
    {
      "label": "integration-test (containers)",
      "type": "shell",
      "command": "./.vscode/scripts/run-integrationtest.sh",
      "group": "test",
      "options": {
        "env": {
          "USE_DAPR": "0"
        }
      },
      "presentation": {
        "reveal": "always",
        "panel": "dedicated",
        "showReuseMessage": false,
        "clear": true
      },
      "isBackground": false,
      "runOptions": {
        "instanceLimit": 1,
        "reevaluateOnRerun": true
      },
      "problemMatcher": {
        "pattern": [
          {
            "regexp": "^FAILED|failed",
            "file": 1,
            "location": 2,
            "message": 3
          }
        ],
        "background": {
          "activeOnStart": true,
          "beginsPattern": "^========================================================================================= ",
          "endsPattern": "."
        }
      }
    },
    {
      "label": "Clean VAL binaries",
      "type": "shell",
      "dependsOn": [
        "Terminate Tasks"
      ],
      "dependsOrder": "sequence",
      "command": "./.vscode/scripts/clean-binaries.sh",
      "isBackground": false,
      "presentation": {
        "close": true
      },
      "problemMatcher": []
    },
    {
      "label": "Terminate Tasks",
      "command": "echo ${input:terminate}",
      "type": "shell",
      "problemMatcher": []
    }
  ],
  "inputs": [
    {
      "id": "SEAT_POS",
      "type": "promptString",
      "description": "Seat Position [0..1000] (1000=100%)",
      "default": "500"
    },
    {
      "id": "SEAT_WAIT",
      "type": "pickString",
      "description": "Wait until seat position reached?",
      "options": [
        "wait",
        "no-wait"
      ],
      "default": "wait"
    },
    {
      "id": "TRUNK_STATUS",
      "type": "promptString",
      "description": "Trunk Status",
      "default": "OPEN"
    },
    {
      "id": "AC_STATUS",
      "type": "pickString",
      "description": "AC Status",
      "options": [
        "ON",
        "OFF"
      ],
      "default": "ON"
    },
    {
      "id": "terminate",
      "type": "command",
      "command": "workbench.action.tasks.terminate",
      "args": "terminateAll"
    }
  ]
}